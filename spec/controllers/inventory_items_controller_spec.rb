require 'spec_helper'
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe InventoryItemsController, type: :controller do
  # include ActiveJob::TestHelper

  # This should return the minimal set of attributes required to create a valid
  # InventoryItem. As you add validations to InventoryItem, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   (title: "test_title", description: "test descrption", weight: 10)
  # }
  #
  # let(:invalid_attributes) {
  #   title: "test_title", description: "test descrption", weight: "invalid weight"
  # }

  let(:user) { create(:user_with_items) }
  let(:inventory_item) { create(:inventory_item) }
  let(:attributes) { attributes_for :inventory_item }
  let(:new_attributes) { { title: "new_title", description: "new_description", weight: 50 } }
  # let(:invalid_attributes) { weight: "invalid weight" }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InventoryItemsController. Be sure to keep this updated too.
  # let(:valid_session) { sign_in user }

  describe "GET #index" do
    context "when not signed in" do
      it "redirects to sign in page" do
        get :index
        expect(response).to redirect_to(login_url)
      end
    end

    context "when signed in" do
      before do
        sign_in user
        get :index
      end

      it "assigns all inventory_items as @inventory_items" do
        expect(assigns(:inventory_items)).to eq(user.inventory_items)
      end
    end
  end

  describe "GET #new" do
    it "assigns a new inventory_item as @inventory_item" do
      sign_in user
      get :new
      expect(assigns(:inventory_item)).to be_a_new(InventoryItem)
    end
  end

  describe "GET #edit" do
    it "assigns the requested inventory_item as @inventory_item" do
      sign_in user
      get :edit, {:id => inventory_item.to_param}
      expect(assigns(:inventory_item)).to eq(inventory_item)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      before do
        sign_in user
      end

      it "creates a new InventoryItem" do
        expect {
          post :create, inventory_item: attributes
        }.to change(InventoryItem, :count).by(1)
      end

      it "assigns a newly created inventory_item as @inventory_item" do
        post :create, inventory_item: attributes
        expect(assigns(:inventory_item)).to be_a(InventoryItem)
        expect(assigns(:inventory_item)).to be_persisted
      end

      it "redirects to the created inventory_item" do
        post :create, inventory_item: attributes
        expect(response).to redirect_to(inventory_items_url)
      end
    end

    #  Currently, there are no checks to invalidate certain params
    #  so there's nothing to test for here
    # context "with invalid params" do
    #   before do
    #     sign_in user
    #   end
    #
    #   it "assigns a newly created but unsaved inventory_item as @inventory_item" do
    #     post :create, inventory_item: invalid_attributes
    #     expect(assigns(:inventory_item)).to be_a_new(InventoryItem)
    #   end
    #
    #   it "re-renders the 'new' template" do
    #     post :create, inventory_item: invalid_attributes
    #     expect(response).to render_template("new")
    #   end
    # end
  end

  describe "PUT #update" do
    before do
      sign_in user
    end

    context "with valid params" do
      it "updates the requested inventory_item" do
        put :update, {:id => inventory_item.to_param, :inventory_item => new_attributes }
        inventory_item.reload
        expect(inventory_item.title).to eq("new_title")
        expect(inventory_item.description).to eq("new_description")
        expect(inventory_item.weight).to eq(50)
      end

      it "assigns the requested inventory_item as @inventory_item" do
        put :update, {:id => inventory_item.to_param, :inventory_item => new_attributes }
        expect(assigns(:inventory_item)).to eq(inventory_item)
      end

      it "redirects to the index of inventory_items" do
        put :update, {:id => inventory_item.to_param, :inventory_item => new_attributes }
        expect(response).to redirect_to(inventory_items_path)
      end
    end

  #  Currently, there are no checks to invalidate certain params
  #  so there's nothing to test for here
  #   context "with invalid params" do
  #     it "assigns the inventory_item as @inventory_item" do
  #       inventory_item = InventoryItem.create! valid_attributes
  #       put :update, {:id => inventory_item.to_param, :inventory_item => invalid_attributes}, valid_session
  #       expect(assigns(:inventory_item)).to eq(inventory_item)
  #     end
  #
  #     it "re-renders the 'edit' template" do
  #       inventory_item = InventoryItem.create! valid_attributes
  #       put :update, {:id => inventory_item.to_param, :inventory_item => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  end

  describe "DELETE #destroy" do
    before do
      sign_in user
    end

    it "destroys the requested inventory_item" do
      inventory_item
      expect {
        delete :destroy, {:id => inventory_item.id}
      }.to change(InventoryItem, :count).by(-1)
    end

    it "redirects to the inventory_items list" do
      inventory_item
      delete :destroy, {:id => inventory_item.to_param}
      expect(response).to redirect_to(inventory_items_path)
    end
  end
end
